*wilder.txt*                              wilder documentation

        A More Adventurous Wildmenu~

wilder                                *wilder*

1. Introduction                     |wilder-introduction|
2. Install                          |wilder-install|
3. Options                          |wilder-options|
4. Pipeline                         |wilder-pipeline|
5. Renderer                         |wilder-renderer|
6. API                              |wilder-api|
7. Depcrecated                      |wilder-deprecated|
8. Configurations                   |wilder-configurations|

==============================================================================
1. Introduction                     *wilder-introduction*

wilder.nvim adds new features to 'wildmenu'.
Features include

1. Automatically provides completions as you type
2. |:| cmdline support: autocomplete commands, expressions, filenames, etc.
3. |/| search support: get completions as you type your search query
4. Customisable pipeline: e.g. choose between substring matching and fuzzy
   matching
5. Async query support: use |python3| for faster and non-blocking queries
6. Customisable themes

==============================================================================
2. Install                          *wilder-install*

Requirements:

- Vim 8.1+ or Neovim 0.3+
- Certain features (e.g. async, cmdline completion) are only enabled in Neovim
- Default async search needs Python 3 enabled

==============================================================================
3. Options                          *wilder-options*

Options can be set using the |wilder#set_option| function.

                                    *wilder#set_option()*
wilder#set_option({name}, {value})
            Sets the option {name} to the given {value}.
            E.g.
>
            call wilder#set_option('foo', 'bar')
<

wilder#set_option({dict})
            For each {key}-{value} pair of the |Dictionary|, sets the option
            {key} to the given {value}.
>
            call wilder#set_option({'foo': 'bar'})
<


modes                               *wilder-option-modes*
            List of modes which wilder will be active in.
            Possible elements: '/', '?' and ':'

            Default: ['/', '?']

use_cmdlinechanged                  *wilder-option-use_cmdlinechanged*
            If true, wilder will refresh queries when the |CmdlineChanged|
            autocommand is triggered.
            Otherwise it will use a |timer| to check whether the cmdline has
            changed.
            Using a timer will be more resource intensive.

            Default: exists('##CmdlineChanged')

interval                            *wilder-option-interval*
            Interval of the |timer| used to check whether the cmdline has
            changed, in milliseconds.
            Only applicable if |wilder-option-use_cmdlinechanged| is false.

            Default: 100

before_cursor                       *wilder-option-before_cursor*
            If true, wilder will look only at the part of the cmdline before
            the cursor, and when selecting a completion, the entire cmdline
            will be replaced.
            Only applicable if |wilder-option-use_cmdlinechanged| is false.

            Default: 0

num_workers                         *wilder-option-num_workers*
            Number of workers for the Python 3 |remote-plugin|.
            Has to be set at startup, before wilder is first run. Setting the
            option after the first run has no effect.

            Default: 2

pipeline                            *wilder-option-pipeline*
            Sets the pipeline to use to get completions.
            See |wilder-pipeline|.

            Default: |wilder#cmdline_pipeline()| and
                     |wilder#vim_search_pipeline()| for Vim
                     |wilder#cmdline_pipeline()| and
                     |wilder#python_search_pipeline()| for Neovim with
                                                       Python 3 support

renderer                            *wilder-option-renderer*
            Sets the renderer to used to display the completions.
            See |wilder-renderer|.

            Default: |wilder#wildmenu_renderer()| with
                     |wilder#previous_arrow()| and |wilder#next_arrow()|

pre_hook                            *wilder-option-pre_hook*
            A function which takes a {ctx}. This function is called when
            wilder starts, or when wilder becomes unhidden. See
            |wilder-hidden|.

            {ctx} contains no keys.

            Default: None

post_hook                           *wilder-option-post_hook*
            A function which takes a {ctx}. This function is called when
            wilder stops, or when wilder becomes hidden. See
            |wilder-hidden|.

            {ctx} contains no keys.

            Default: None

==============================================================================
4. Pipeline                         *wilder-pipeline*

The pipeline is used to get completions from a given query. Use
|wilder-option-pipeline| to set the pipeline.

A pipeline is a function or  list of functions. When it is a function, it is
implicitly converted to a list with its only element being the function. The
functions are known as pipes.

Each function in the list should take a {ctx} context object and a {x} value
and return a new {x} value. The resulting {x} is then passed to the next
function in the list. The first element is passed the current cmdline. The
result of the last element will be the completions for that query. See
|wilder-pipeline-context| for what {ctx} contains.

A contrived example:
>
    wilder#set_option('pipeline', [
      \   {ctx, x -> [x, 'foo', 'bar']},
      \   ])
<
This will return the 3 completions, the current cmdline and the strings 'foo'
and 'bar'.

The result of the pipeline should be a list of strings or a dictionary. For
the dictionary, the 'value' value should be a list of strings. See
|wilder-pipeline-result| for more details on other keys the dictionary
contain, and see |wilder-pipeline-flow| for more details on how the result
will be used.

There are 3 special types of values, which when returned in the middle of the
pipeline, will cause the pipeline to stop. These are `v:false` `v:true` and
functions. See |wilder-pipeline-v:false|, |wilder-pipeline-v:true| and
|wilder-pipeline-thunk| for more details on what these special values mean,
and how theye are handled.

A pipe can throw an exception which will also cause the pipeline to stop.

wilder provides some built-in pipes Combine these pipes with your own
functions to create a custom pipeline. In particular, use |wilder#branch| to
add control flow to your pipeline. See |wilder-pipeline-pipe|s for the list of
pipes.

wilder also provides built-in pipelines. These pipelines can be combined with
|wilder#branch|. See |wilder-pipelines| for the list of pipelines.

                                    *wilder-pipeline-context*
The first argument to a pipe is a {ctx} context object. The context is a
|Dictionary| containing the following keys:

                `input`
                The input to the first element of the pipeline.

                `run_id`
                A number to indicate the current pipeline running.

Although it is not recommended, pipes can use the {ctx} to pass information to
subsequent pipes.

                                    *wilder-pipeline-v:false*
Returning the |v:false| in a pipe will cause the pipeline to stop and return
|v:false|. |v:false| indicates to wilder to not continue on with the pipeline,
and treat it as though there are no completions. use this to return early from
a pipeline based on certain conditions.

Example:
>
    wilder#set_option('pipeline', [
      \   {ctx, x -> empty(x) ? v:false : x},
      \   {ctx, x -> MyCompletionFunction(x)},
      \   ]
<
This pipeline will terminate early if the cmdline is empty.
Since this is a common pattern, it is provided as the |wilder#check()|
pipe.

                                    *wilder-pipeline-v:true*
                                    *wilder-hidden*
Returning the |v:true| in a pipe is the same as returning |v:false|, except
that it has the added behaviour of causing wilder to be hidden. When wilder is
hidden, |wilder#in_context()| will return false, and wilder will not be
rendered. Note that wilder is still enabled, and will still be handle
completions and be shown again when the next pipeline returns a non-|v:true|
value.

                                    *wilder-pipeline-thunk*
Returning a function {f} in a pipe will cause the pipeline to be suspended.
The function is called a thunk. The thunk will then be called with a new
{ctx}. Thunks can be used to call async code.

After the async code has finished running, |wilder#resolve()| should be caled
with {ctx} and the result {x} as arguments. The original {ctx} from the parent
function can be ignored. The pipeline will then be resumed, and the {x} value
will be passed on to the next pipe.

If there is an error, |wilder#reject()| should be called instead, with {ctx}
and {error} as arguments.

If the result of a thunk is another thunk, the result thunk will be called.
The pipeline will resume when one of the thunks eventually returns a
non-function result.

Note: exactly one of |wilder#resolve()| or |wilder#reject()| has to be called
eventually. Not calling either will result in a memory leak, and calling more
than one will result in an error.

Example:
>
    wilder#set_option('pipeline', [
      \   {_, x -> {ctx -> timer_start(100, {-> wilder#resolve(ctx, x)})}},
      \   {ctx, x -> MyCompletionFunction(x)},
      \   ]
<
This will call `MyCompletionFunction` after a 100 millisecond delay.

Use this behaviour to create async pipes.

                                    *wilder-pipeline-result*
The result of the pipeline should be a list of strings or a dictionary. For
the dictionary, the 'value' value should be a list of strings.

When the result is a list, it is implicitly converted into a dictionary with
the list of keys under the 'value' key.

The result dictionary allows you to change how the candidate is handled. For
example, you may wish to escape certain characters when drawing the candidate
or only change certain parts of the cmdline when the candidate is selected.

The Result dictionary has the following keys:

            `value`                 *wilder-pipeline-result-value*
            Mandatory~
            The list of candidates as strings

            `data`                  *wilder-pipeline-result-data*
            Optional~
            A dictionary containing arbitrary data. Will be passed to the
            `draw`, `output` and `replace` functions when they are called. If
            not set, will default to an empty dictionary.

            By default, {data} will be an empty dictionary. If the `query` key
            is not set, `query` will be set to the input to the cmdline.

            `draw`                  *wilder-pipeline-result-draw*
            Optional~
            A list of strings or functions which takes a {ctx}, {x} and {data}
            and returns a string representing how {x} will be drawn by the
            renderer.
            For each element in the list, if the element is a string, it is
            converted to a function using |function()|.
            {ctx} and {x} are passed to the function and the result is the new
            value of {x}. {ctx} and the new value of {x} is then passed to the
            next element until there are no further elements.

            The keys of {ctx} are:
                `selected`
                Boolean indicating whether the candidate is selected.

                `i`
                The index of the {x} in the list of candidates.

            See |wilder-pipeline-result-data| on how {data} is gotten.

            Default: None

            `output`                *wilder-pipeline-result-output*
            Optional~
            A list of strings or functions which takes a {ctx}, {x} and {data}
            and returns a string representing how {x} will be output when
            selected as a completion candidate.
            See the |wilder-pipeline-result-draw| option for how iterating
            through the list works.

            {ctx} has no keys.

            See |wilder-pipeline-result-data| on how {data} is gotten.

            Default: None

            `replace`               *wilder-pipeline-result-replace*
            Optional~
            A list of strings or functions which takes a {ctx}, {x} and {data}
            and returns the cmdline to replace the current one.
            See |wilder-option-before_cursor| on which part of the cmdline will be
            replaced.
            See the |wilder-pipeline-result-draw| option for how iterating
            through the list works.

            The keys of {ctx} are:
                `cmdline`
                The cmdline which was replaced. This value should be used
                instead of |getcmdline()| as the current cmdline may have
                changed.

            See |wilder-pipeline-result-data| on how {data} is gotten.

            Default: None

                                    *wilder-pipeline-flow*
1. The pipeline starts with the current cmdline as the input

2. The pipeline finishes with a list of strings or a dictionary {result}.

3. The list of strings is implicitly converted into a result dictionary with
   the list of strings under the `value` key.

4. Each element of the `value` list {x} is drawn by the renderer:
   If {result} does not contain the key `draw`, its {x} entry is used.
   Otherwise, |wilder-pipeline-result-draw| is applied. The result is then
   passed to the renderer.

5. When a candidate {x} is selected, its value can be modified before
   inserting it to the cmdline.
   If {result} does not contain the key `output`, its {x} entry is used.
   Otherwise, |wilder-pipeline-result-output| is applied. The result is then
   used for insertion to the cmdline.

6. Finally, the output from above will be inserted to the cmdline.
   See |wilder-option-before_cursor| on which part of the cmdline will be
   replaced.
   If {result} does not contain the key `output`, its {x} entry is used.
   Otherwise, |wilder-pipeline-result-output| is applied. The result is then
   used to replace the cmdline.

The |wilder#result()| pipe is a helper which allows easy modification of the
result dictionary.

                                    *wilder-pipeline-pipe*

wilder#check({f}, ...)              *wilder#check()*
                                    Pipe~
            Takes a variadic list of functions. The functions should take
            {ctx} and {x} as arguments and return true or false.
            If any of the functions return false, this pipe will return
            |v:false|.
            Returns {x} otherwise.

wilder#debounce({t})                *wilder#debounce()*
                                    Pipe~
            Takes a time interval {t} in milliseconds.
            When this pipe is reached, the pipeline is interrupted. The
            pipeline only continues when the same pipe has not been reached
            for {t} milliseconds.
            The pipeline then continues with the latest value passed to the
            pipe.

            Note that using debounce in |wilder#branch()| will stall all
            branches since the branches are run sequentially.

wilder#branch({list_of_pipelines})  *wilder#branch()*
                                    Pipe~
            Takes a list of pipelines.
            Sequentially runs each of the pipelines, using the {ctx} and {x}
            passed to the original pipe.
            {ctx} is copied, and will not be shared between the pipelines.
            If the result of a pipeline is |v:false|, the next pipeline will
            be run.
            If the result of a pipeline is a non-|v:false| value {x}, this
            pipe will return {x}.
            If the result of all  the pipelines are |v:false|, this pipe will
            return |v:false|.
            Use this to add control flow to pipelines.

            Example:
>
                wilder#set_option('pipeline', [
                  \   wilder#branch(
                  \     [
                  \       wilder#check({ctx, x -> empty(x)}),
                  \       wilder#history(),
                  \     ],
                  \     wilder#search_pipeline(),
                  \   ),
                  \   ]
<
            This pipeline will return completions from the history is {x} is
            empty.

                                    *wilder#history()*
wilder#history([{max_num}, [{cmdtype}]])
                                    Pipe~
            A pipe which returns up to {max_num} values from the |history| of
            {cmdtype}.
            {max_num} defaults to 50.
            Passing zero or a negative value of {max_num} will result in no
            limit.
            By default, {cmdtype} is the value of |getcmdtype()|.
            See |hist-names| for the possible values of {cmdtype}

wilder#vim_substring_pattern()      *wilder#vim_substring_pattern()*
                                    Pipe~
            Takes a string and appends it with a substring regex.

wilder#vim_search([{options}])      *wilder#vim_search()*
                                    Pipe~
            Takes a regex and searches the current buffer for completions
            matching the regex. Returns a list of unique strings.

            {options} is a dictionary with keys:
            `max_candidates`
            Maximum number of candidates to return.
            0 or less sets no limit.

            Default: 300

wilder#python_substring_pattern()   *wilder#python_substring_pattern()*
                                    Pipe~
            Takes a string and converts it into a Python regex which matches
            substrings.

                                    *wilder#python_fuzzy_pattern()*
wilder#python_fuzzy_pattern([{options}])
                                    Pipe~
            Takes a string and converts it into a Python fuzzy regex.
            The string is split into characters and the fuzzy regex for `word`
            is added in between each character.

            {options} is a dictionary with keys:
            `word`
            Optional~
            Python regex for word characters. If using a regex group, use a
            non-capturing group `(?:)`.

            Default: '\w'

            `start_at_boundary`
            Optional~
            If true, the regex will only match at the beginning of a word
            boundary.

            Default: 1

                                    *wilder#python_fuzzy_delimiter_pattern()*
wilder#python_fuzzy_delimiter_pattern([{options}])
                                    Pipe~
            Takes a string and converts it to a Python regex by splitting the
            string into characters. Each character either follows directly
            from the previous one, or is the start of a delimited region.
            The start of a delimited region is either
            1. a `delimiter` character followed by a character
            2. An uppercase character

            e.g.
            `fb` matches `FooBar`, `foo_bar`, `fooBar`
                 but not `foobar` since `bar` is not delimited

            {options} is a dictionary with keys:
            `word`
            Optional~
            Python regex for word characters. If using a regex group, use a
            non-capturing group `(?:)`.

            Default: '\w'

            `delimiter`
            Optional~
            Python regex for delimiter characters. If using a regex group, use
            a non-capturing group `(?:)`.

            Default: '(?:[^\w\s]|_)' non-word non-space character or '_'

            `start_at_boundary`
            Optional~
            If true, the regex will only match at the beginning of a word
            boundary.

            Default: 1

wilder#python_search([{options}])   *wilder#python_search()*
                                    Neovim only~
                                    Async~
                                    Pipe~
            Takes a regex and searches the current buffer for completions
            matching the regex using Python 3.
            Returns a list of unique strings.

            {options} is a dictionary with keys:
            `max_candidates`
            Maximum number of candidates to return.
            0 or less sets no limit.

            Default: 300

            `engine`
            Regex engine to use. Has to be compatible with Python 3's `re`
            module.
            For faster speed, the `re2` module is recommended. `re2` for
            Python3 can be installed by using `pip install pyre2` or built
            from https://github.com/andreasvc/pyre2.

            Default: 're'

wilder#result([{dictionary}])       *wilder#result()*
                                    Pipe~
            Takes a dictionary and returns a pipe which will transform the
            {input} into a result dictionary and modifies its keys. See
            |wilder-pipeline-result| for more information on how the keys of
            the dictionary is used.

            For each {key} and {value} pair in {dictionary}: If {value} is a
            list, and {input} does not contain {key}, {input}'s {key} is
            mapped to the list. Otherwise, the list is appended to the end of
            the list at {input}'s {key}.

            If {value} is a dictionary, and {input} does not contain {key},
            {input}'s {key} is mapped to the dictionary. Otherwise, the
            dictionary at {input}'s {key} is extended with the dictionary
            using |extend()|.

            If {value} is a function, it should be a function which takes a
            {ctx}, {old_value} and {data} and returns the new value to be
            used, or a |wilder-pipeline-thunk| which returns the new value. If
            {input} does not contain {key}, {old_value} will be |v:null|.
            {data} is the entry for {input}'s `data` key, or an empty
            dictionary if the key `data` does not exist. This can be used to
            pass arbitrary data to the functions being called.

            If {value} is none of the above, the value at {input}'s {key} will
            be mapped to {value}.

            For example:
>
            [
            \ {ctx, x -> MyCompletionFunction(x)},
            \ wilder#result({'draw': [{ctx, x -> (ctx['i'] + 1) . '. ' . x}]}),
            \ wilder#result({'draw': [{ctx, x -> ctx['selected']
            \                         ? '[' . x . ']' : x)}]}),
            \ ]
<
            This pipeline will first prepend the index of the candidate and
            then surround it with square brackets if it is currently selected.


                                    *wilder#result_output_escape()*
wilder#result_output_escape({chars})
                                    Pipe~
            Helper function which returns a |wilder#result()| which escapes
            {chars} in the `output` when selecting a candidate. See
            |wilder-pipeline-flow| on how `output` is used.


PIPELINES                           *wilder-pipelines*

wilder#search_pipeline([{options}]) *wilder#search_pipeline()*
                                    Pipeline~
            Returns a |wilder#python_search_pipeline()| for Neovim and a
            |wilder#vim_search_pipeline()| for Vim.

            If provided, the {options} argument is passed to the respective
            function.

                                    *wilder#vim_search_pipeline()*
wilder#vim_search_pipeline([{options}])
                                    Pipeline~
            Returns a pipeline which does Vim substring search.

            {options} is a dictionary with keys:
            `skip_cmdtype_check`
            Optional~
            If true, skips checking that |getcmdtype()| is '/' or '?'.  This
            is useful when using the pipeline as the `pipeline` option for
            |wilder#substitute_pipeline()|.

            Default: 0

wilder#python_search_pipeline([{options}])
                                    *wilder#python_search_pipeline()*
                                    Neovim only~
                                    Async~
                                    Pipeline~
            Returns a pipeline which does Python search.

            Forwards the respective options to |wilder#python_search()|.

            {options} is a dictionary with keys:
            `pattern`
            Optional~
            One of 'fuzzy', 'fuzzy_delimiter', 'substring' or a function.
            Generates the Python pattern to pass to |wilder#python_search()|.

            The function should take a {ctx} and the input {x} and return a
            Python pattern.

            The special values 'fuzzy', 'fuzzy_delimiter' and 'substring' uses
            |wilder#python_fuzzy_pattern()|,
            |wilder#python_fuzzy_delimiter_pattern()| and
            |wilder#python_substring_pattern()| respectively as the function.

            Default: 'substring'

            `engine`
            Optional~
            Regex engine to pass to |wilder#python_search()|.

            Default: Empty

            `sorter`
            Optional~
            A function is used to sort the candidates. The function should
            take a {ctx}, {candidates} and {query} and return the sorted
            {candidates} based on {query}. The function can return a
            |wilder-pipeline-thunk| as well.

            If no function is provided, no sorting will be done on the
            candidates.

            For Neovim, |wilder#python_sorter_difflib()| and
            |wilder#python_sorter_fuzzywuzzy()| can be used here.

            Default: Empty

            `skip_cmdtype_check`
            Optional~
            If true, skips checking that |getcmdtype()| is '/' or '?'.  This
            is useful when using the pipeline as the `pipeline` option for
            |wilder#substitute_pipeline()|.

            Default: 0

            `debounce`
            Optional~
            An interval in milliseconds. If greater than 0, debounces the
            pipeline using |wilder#debounce()|.

            Default: 0

            `sort`
            Deprecated: Use `sorter`.

            `regex`
            Deprecated: Use `pattern`.

                                    *wilder#cmdline_pipeline()*
wilder#cmdline_pipeline([{options}])
                                    Neovim only~
                                    Pipeline~
            Returns a pipeline which returns completions in cmdline mode.
            Handles user command completions, file completions and cmdline
            completions.
            For completions during |:substitute|, use
            |wilder#substitute_pipeline()|.

            Note: Custom completions for user commands are only available in
            Neovim. Wilder will be hidden when attempting to complete user
            command completions in Vim. See |wilder-hidden|.

            {options} is a dictionary with keys:
            `fuzzy`
            0, 1, or 2 representing the fuzzy matching mode. If 0, fuzzy
            matching is disabled. If 1, fuzzy matching is done and candidates
            have to start with the first character of the query. If 2, the
            candidates do not have to start with the first character.

            Note: Fuzzy matching does not work in some cases, e.g. when
            getting |help| completions, when completing filenames with
            |wildcards| or user-defined command completions
            |:command-completion|.

            Note: When set to 2, `shellcmd` candidates will still start with
            the first character of the query due to performance reasons.

            Default: 0

            `use_python`
            Neovim only~
            Use async Python to get file or directory completions and for
            fuzzy fitering.

            Default: has('nvim')

            `fuzzy_filter`
            The function to use when matching candidates in fuzzy completion.
            Takes a {ctx}, {candidates} and {query} and returns the list of
            filtered candidates. 

            Can return a |wilder-pipeline-thunk|.  Only used if `fuzzy` is
            true.

            For example:
>
            function! MyFilter(ctx, candidates, query) abort
              return filter(copy(a:candidates), {_, x ->
                  \ SomeCondition(x)})
            endfunction
<
            Default: |wilder#python_fuzzy_filter()| if `use_python` is true
                     |wilder#fuzzy_filter()| otherwise

            `hide_in_substitute`
            When true, hides wilder when in a |:substitute| command.
            See |wilder-hidden|.
            See https://github.com/neovim/neovim/issues/9777.

            Default: has('nvim') && !has('nvim-0.3.7')

            `sorter`
            Optional~
            A function is used to sort the candidates. The function should
            take a {ctx}, {candidates} and {query} and return the sorted
            {candidates} based on {query}. The function can return a
            |wilder-pipeline-thunk| as well.

            If no function is provided, no sorting will be done on the
            candidates.

            For Neovim, |wilder#python_sort_difflib()| and
            |wilder#python_sort_fuzzywuzzy()| can be used here.

            Default: Empty

            `set_pcre2_pattern`
            Optional~
            When true, sets the `pcre2.pattern` key in
            |wilder-pipeline-result-data| to the pattern used in the default
            fuzzy filtering. This key is used by |wilder#pcre2_highlighter()|.

            Should be set to false when using a fuzzy filter not based on
            PCRE2.

            Default: 1

            `sort`
            Deprecated: Use `sorter`.

                                    *wilder#python_file_finder_pipeline()*
wilder#python_file_finder_pipeline([{options}])
                                    Neovim only~
                                    Async~
                                    Pipeline~
                                    Experimental~
            Returns a pipeline which matches files fuzzily. This pipeline is
            used when the cmdline is expanding `file` or `dir` completions,
            which for example occurs when in the |:edit| or |:cd| commands.

            If the path for the argument is not relative to the current
            directory, or cannot be resolved as a descendant of the current
            path, or starts with './', the pipeline will return |v:false|.

            Note |wilder#python_file_finder_pipeline()| should be placed in
            front of |wilder#cmdline_pipeline()| when using |wilder#branch()|.

            {options} is a dictionary with keys:
            `file_command`
            Optional~
            A list of strings representing the command used to search for
            files.

            To use `ripgrep`, set to this option to ['rg', '--files'].
            To use `fd`, set to this option to ['fd', '-tf'].

            Default: ['find', '.', '-type', 'f', '-printf', '%P\n']

            `dir_command`
            Optional~
            A list of strings representing the command used to search for
            directories.

            To use `fd`, set to this option to ['fd', '-td'].

            Default: ['find', '.', '-type', 'd', '-printf', '%P\n']

            `timeout`
            Optional~
            A timeout in milliseconds. If the process used to gather the list
            of files does not finish before the timeout, the process is
            killed.  Any subsequent call to the pipeline will result in
            |v:false|.

            Default: 5000

            `debounce`
            Optional~
            An interval in milliseconds. If greater than 0, debounces the
            pipeline using |wilder#debounce()|.

            Default: 0

            `path`
            Optional~
            A function or a string representing the path to the directory to
            gather the files from. If it is a string, it will be converted to
            a function which returns the string.

            The function should take {ctx} and {res} as arguments and return
            the directory to search in. The directory path should be an
            absolute path and not a relative one.  Returning an empty string
            will search in the current directory.

            Default: |wilder#project_root()|

            `filters`
            Optional~
            A list of filters to be used on the list of files. The list of
            files is passed through the filters sequentially and the final
            result is returned to the pipeline.

            Each element can either be a string representing the filter or an
            object in the form {'name': {string}, ['opts': {dictonary}]},
            where the optional `opts` key represents the options are passed to
            the filter. If a string is used, it is implicitly converted into a
            dictionary with no options.

            Can be set to an empty list to return the entire list of files.

            For performance, using `cpsm` with ['cpsm_filter'] is recommended.

            The available filters are:
            `fuzzy_filter`
            Filters the list with |wilder#python_fuzzy_filter()|.

            Options:
                `engine`
                Optional~
                The regex engine to use.

                Default: 're'

                `case_sensitive`
                Optional~
                0, 1 or 2 representing how to handle case sensitivity. 0
                indicates the filter is not case sensitive and 1 otherwise.
                Setting to 2 makes the filter use "smartcase" where 'a'
                matches with 'a|A' and 'A' matches with 'A' ony.

                Default: 2

            `fruzzy_filter`
            Filters and sorts the list with |wilder#python_fruzzy_filter()|.
            The `fruzzy.vim` Vim plugin is needed.

            Options:
                `limit`
                Optional~
                Maximum number of candidates to return.

                Default: 1000

                `fruzzy_path`
                Optional~
                The parent directory of the `fruzzy.py` file.

                Default: Inferred by Neovim.

            `cpsm_filter`
            Filters and sorts the list with |wilder#python_cpsm_filter()|.
            The `cpsm` Vim plugin is required.

            Options:
                `cpsm_path`
                Optional~
                The parent directory of the `cpsm_py.so` file.

                Default: Inferred by Neovim.

            `difflib_sorter`
            Sorts the list with |wilder#python_difflib_sorter()|.

            Options:
                `case_sensitive`
                Optional~
                0 or 1 representing whether the sorting is case sensitive.

                Default: 1

            `fuzzywuzzy_sorter`
            Sorts the list with |wilder#python_fuzzywuzzy_sorter()|. The Python3
            `fuzzywuzzy` module is needed.

            Default: ['fuzzy_filter', 'difflib_sorter']

                                    *wilder#substitute_pipeline()*
wilder#substitute_pipeline([{options}])
                                    Pipeline~
            Returns a pipeline which runs the given pipeline when in a
            |:substitute| command.
            Uses the {pattern} section of the command as the argument.

            Note |wilder#substitute_pipeline()| should be placed in front of
            |wilder#cmdline_pipeline()| when using |wilder#branch()| if
            `hide_in_substitute` is true.

            {options} is a dictionary with keys:
            `pipeline`
            The pipeline to pass the {pattern} section to.
            |wilder#vim_search_pipeline()| and
            |wilder#python_search_pipeline()| can be used as the pipeline if
            the `skip_cmdtype_check` option is set.

            Default: For vim:
                     wilder#vim_search_pipeline({'skip_cmdtype_check' : 1})
                     For nvim:
                     wilder#python_search_pipeline({'skip_cmdtype_check' : 1})

            `hide_in_replace`
            When true, hides wilder when in the {string} section of the
            |:substitute| command.
            See |wilder-hidden|.
            See https://github.com/neovim/neovim/issues/9777.

            Default: has('nvim') && !has('nvim-0.3.7')

            Note For Neovim < 0.3.7, you can set the `hide_in_replace` option
            above to `1` add this snippet to your vimrc to disable inccommand
            while in the {pattern} section.
>
        function! s:save_inccommand(...)
          let s:saved_inccommand = &inccommand
          let &inccommand = ''
        endfunction

        function! s:restore_inccommand(...)
          let &inccommand = s:saved_inccommand
        endfunction

        call wilder#set_option('pre_hook', funcref('s:save_inccommand'))
        call wilder#set_option('post_hook', funcref('s:restore_inccommand'))
<

            Note For Neovim 0.4+, the renderer does not redraw correctly when
            using 'inccommand'.
            See https://github.com/neovim/neovim/issues/9783.

==============================================================================
5. Renderer                         *wilder-renderer*

The renderer is used to draw wilder and the completion candidates on the
screen. Use |wilder-option-renderer| to set the renderer.

A renderer is a dictionary containing the following keys:

            `render`
            Mandatory~
            A function which takes a {ctx} and the pipeline result {result}
            and does the necessary actions to draw the results on the screen.

            The keys of {ctx} are:
                `selected`
                The index of the selected candidate. -1 indicates no selection.

                `direction`
                A number to indicate the whether the previous candidate or the
                next candidate was selected. 1 indicates the next candidate,
                -1 indicates the previous candidate, 0 indicates that there
                was no change.

                `done`
                A boolean to indicate whether the current pipeline has finished.

                `has_error`
                True if the pipeline resulted in an error.

                `clear_previous`
                A boolean to indicate whether the previous state should be
                cleared.

                `run_id`
                The `run_id` from the context which returned {result}. See
                |wilder-pipeline-context|.

            `pre_hook`
            Optional~
            A function which takes a {ctx}. This function is called when
            wilder starts, or when wilder becomes unhidden. See
            |wilder-hidden|.

            {ctx} contains no keys.

            `post_hook`
            Optional~
            A function which takes a {ctx}. This function is called when
            wilder stops, or when wilder becomes hidden. See
            |wilder-hidden|.

            {ctx} contains no keys.

There is are 2 in-built renderers, |wilder#wildmenu_renderer()| and
|wilder#popupmenu_renderer()|.

                                    *wilder#wildmenu_renderer()*
wilder#wildmenu_renderer([{options}])
                                    Renderer~
            Returns a renderer which draws the results on the statusline or
            with a floating window.

            {options} is a dictionary with keys:
            `mode`
            One of 'float' or 'statusline'. The 'float' option requires Neovim
            0.4+ with |api-floatwin|.

            When this option is 'float', the results are drawn using a
            floating window. Otherwise, the results will be drawn on the
            statusline.

            Note: The statusline might be truncated or not update correctly
            when there are too many separate highlight chunks. See |E541|.
            This can be mitigated by turning off the `highlighter` option.

            Default: has('nvim-0.4') ? 'float' : 'statusline'

            `highlights`
            Optional~
            A dictionary whose values are |highlight-groups|. See
            |wilder-pipeline-result-draw| on how this dictionary is used.

            The default keys of the dictionary are:
                `default`
                Optional~
                The default highlight group used.

                Default: 'StatusLine'

                `selected`
                Optional~
                The highlight group used for a selected candidate.

                Default: 'WildMenu'

                `error`
                Optional~
                The highlight group used for the error message.

                Default: 'ErrorMsg'

                `separator`
                Optional~
                The highlight group used for the separators.

                Default: The same value as the `default` key

                `accent`
                Optional~
                The highlight group used for accents. See the `highlighter`
                option.

                Default: The `default` highlight with |underline| and |bold|

                `selected_accent`
                Optional~
                The highlight group used for accents for a selected candidate.
                See the `highlighter` option.

                Default: The `selected` highlight with |underline| and |bold|

            `separator`
            Optional~
            The separator between candidates.

            Default: '  '

            `ellipsis`
            Optional~
            The string to appended to a candidate if it is too long. The
            candidate is first truncated.

            Default: '...'

            `left`
            Optional~
            The items rendered on the left of the candidates.
            See |wilder#wildmenu_renderer()-item|s.

            Default: [wilder#wildmenu_previous_arrow()]

            `right`
            Optional~
            The items rendered on the right of the candidates.
            See |wilder#wildmenu_renderer()-item|s.

            Default: [wilder#wildmenu_next_arrow()]

            `highlighter`
            Optional~
            A function or a list of functions used to apply the `accent` and
            `selected_accent` highlights to a candidate. For convenience, also
            accepts a single function, which will be converted to a singleton
            list.

            The function should take a {ctx}, {candidate} and {data} and
            return 0 when accents cannot be applied and return a list
            otherwise.
            The returned list should consist of [{start}, {len}] spans, where
            each span defines the byte start and byte length of the part of
            the string to be highlighted to be respectively.
            The spans should be in strictly increasing order and should not
            overlap.

            For example, with {candidate} `abcdef` and result list [[0, 1],
            [3, 2]], the characters `a`, `d` and `e` will be highlighted with
            the `accent` or `selected_accent` highlights.

            Returning an empty list will result in no accent highlights.

            If it is a list of functions, the list is applied in order, and
            the first non-0 result will be used to apply the higlights. If all
            functions return 0, no highlights will be applied.

            {ctx} contains no keys.

            {data} is the dictionary from |wilder-pipeline-result-data|.

            |wilder#query_highlighter()| and |wilder#pcre2_highlighter()| are
            helper functions which can be used to apply accents to the
            candidates from |wilder#cmdline_pipeline()| and
            |wilder#python_search_pipeline()|.

            Example:
>
            call wilder#set_option('renderer', wilder#wildmenu_renderer({
                  \ 'highlighter': wilder#pcre2_highlighter(),
                  \ }))
<

            Default: []

            `hl`
            Deprecated: Use `highlights`.

            `selected_hl`
            Deprecated: Use `highlights`.

            `error_hl`
            Deprecated: Use `highlights`.

            `separator_hl`
            Deprecated: Use `highlights`.

            `apply_highlights`
            Deprecated: Use `highlighter`.

                                    *wilder#airline_theme()*
                                    *wilder#lightline_theme()*
wilder#airline_theme([{options}])
wilder#lightline_theme([{options}])
                                    Wildmenu renderer theme~
            Returns an object which can be passed to
            |wilder#wildmenu_renderer()| to styles the renderer to look like
            Airline or Lightline.

            The theme will use the highlight groups from Airline or Lightline
            and consists of 3 items - the current mode and
            |wilder#spinner()| on the left, and |wilder#index()| on the right.

            {options} is identical to the argument of
            |wilder#wildmenu_renderer()| with the following differences:

            `use_powerline_symbols`
            A new key which sets whether to use powerline symbols for the
            separators between sections.

            When set to 0, no symbols will be drawn.
            When set to 1, 2 arrows will be drawn each on the left and right
            sections.
            Otherwise, only 1 arrow will be drawn each on the left and right
            sections.

            Default: `g:airline_powerline_fonts` for Airline
                     has_key(g:lightline, 'separators') for Lightline

            `powerline_symbols`
            A new key which sets the symbols to use for the powerline
            separators. Should be a 2 element list, with the first element
            being the left separator and the second being the right separator.

            Default: ['', ''] for Airline
                     Extracted from g:lightline.separators for Lightline

            The `highlight` object accepts 2 new keys:
                `mode`
                Optional~
                The highlight group for the item which shows the current
                mode and the |wilder#spinner()|.

                Default: 'airline_a_bold' for Airline
                         'LightlineLeft_active_0' for Lightline

                `index`
                Optional~
                The highlight group for the |wilder#index()| item.

                Default: 'airline_z_bold' for Airline
                         'LightlineRight_active_0' for Lightline

                `left_arrow2`
                Optional~
                The highlight group for the left powerline symbol after the
                mode item.

                Default: 'airline_b' for Airline
                         'LightlineLeft_active_1' for Lightline

                `right_arrow2`
                Optional~
                The highlight group for the right powerline symbol before the
                |wilder#index()| section.

                Default: 'airline_y' for Airline
                         'LightlineRight_active_1' for Lightline


                If not defined, the following highlights are set:
                `default`
                'airline_c' for Airline
                'LightlineMiddle_active' for Lightline

                `selected`
                'WildMenu' for both

            Example:
>
            call wilder#set_option('renderer', wilder#wildmenu_renderer(
                  \ wilder#airline_theme({
                  \   'highlights': {'default': 'Statusline'},
                  \   'separator': '  ',
                  \ })))
<


                                    *wilder#wildmenu_renderer()-item*
For |wilder#wildmenu_renderer()|, items can be of the following types:

            String:
            The value of the string will be drawn. To change its highlight
            group, see the entry for Dictionary.

            List:
            A list of |wilder#wildmenu_renderer()-item|s. Any item can be in
            the list, even other nested lists.  Items of the list are drawn in
            sequence.

            Dictionary:
            A dictionary with the following keys:
                `value`
                Mandatory~
                A |wilder#wildmenu_renderer()-item|. Can be nested.

                `len`
                Optional~
                Used to determine the display width taken up by the item.
                Can be of the following types:

                    Number:
                    The value of the number is used.

                    Function:
                    A function which takes a {ctx} and the pipeline result
                    {result} and returns the display width taken up by the
                    item.
                    The keys of {ctx} are the same as the ones in the `render`
                    key of |wilder-renderer|.

                Default: None

                `hl`
                Optional~
                The highlight group to use when drawing this item. Nested
                items can override this by defining their own `hl` key.

                Default: The `hl` option for the renderer.

                `pre_hook`
                Optional~
                A function which takes a {ctx}. This function is called when
                wilder starts, or when wilder becomes unhidden. See
                |wilder-hidden|.

                {ctx} contains no keys.

                Default: None

                `post_hook`
                Optional~
                A function which takes a {ctx}. This function is called when
                wilder stops, or when wilder becomes hidden. See
                |wilder-hidden|.

                {ctx} contains no keys.

                Default: None

            Function:
            A function which takes a {ctx} and the pipeline result {result}
            and returns a item.

            The keys of {ctx} are the same as the ones in the `render`
            key of |wilder-renderer|, with an additional `page` key which is a
            2 element array [{start}, {end}] indicating the start and end of
            the candidates currently being drawn. If no candidates are drawn,
            the page is [-1, -1].

            Note: `ctx.page` is not available when determining the `len` of
            the item. This means items depending on `ctx.page` have to be
            wrapped in a dictionary and provide the `len` entry.

Before drawing the results, the amount of space available needs to be
calculated. This is done by calculating the total space taken by the
items, and then subtracting that from the total space available.

For String items, it is the |strdisplaywidth()| of the string.
For List items, it is the sum of the space used by the nested items.
For Dictionary items, if it has no `len` entry, the space taken by the `value`
entry is calculated. Otherwise, the `len` entry is used if it is a Number, or
if it is a function, the result of calling the `len` entry is used.
For Function items, the function is called, and the space used of the result
is calculated.

This means that when using Dictionary items, the `len` entry has to be
consistent with the `value` entry, otherwise the rendering will not be
correct.

When drawing the results, the items are evaluated.

For String items, the string itself is used.
For List items, each element is evaluated and then drawn in sequence.
For Dictionary items, the `value` entry is evaluated.
For Function items, the function is called, and its result evaluated.
If any of these result in another |wilder#wildmenu_renderer()-item|, it is
evaluated again.

The default highlight group used for the result is the `hl` option passed to
the renderer. To change the highlight group, use a Dictionary item together
with |wilder#make_hl()|.

The following items are provided:

                                    *wilder#wildmenu_previous_arrow()*
wilder#wildmenu_previous_arrow([{options}])
                                    wilder#wildmenu_renderer() item~
            Returns an item which shows a previous arrow when there are
            previous candidates which do not fit in the current view.
            Note Has to be used with |wilder#next_arrow()|, otherwise the
            `len` entry will not be evaluated correctly.

            {options} is a dictionary with keys:
            `previous`
            Optional~
            The arrow to be drawn.

            Default: '< '

            `hl`
            Optional~
            The highlight group to use.

            Default: None

                                    *wilder#wildmenu_next_arrow()*
wilder#wldmnue_next_arrow([{options}])
                                    wilder#wildmenu_renderer() item~
            Returns an item which shows a next arrow when there are
            additional candidates which do not fit in the current view.
            Note Has to be used with |wilder#previous_arrow()|, otherwise the
            `len` entry will not be evaluated correctly.

            {options} is a dictionary with keys:
            `next`
            Optional~
            The arrow to be drawn.

            Default: ' >'

            `previous`
            Optional~
            The arrow to be drawn used by |wilder#previous_arrow()|.

            Default: '< '

            `hl`
            Optional~
            The highlight group to use.

            Default: None
             
wilder#wildmenu_index([{options}])  *wilder#wildmenu_index()*
                                    wilder#wildmenu_renderer() item~
            Returns an item which shows the index of the currently
            selected candidate and the total number of candidates.
            For example, if there are 10 candidates and the 5th one is
            selected, it will draw ' 5/10'.

            {options} is a dictionary with keys:
            `hl`
            Optional~
            The highlight group to use.

            Default: None

                                    *wilder#wildmenu_spinner()*
wilder#wildmenu_spinner([{options}])
                                    wilder#wildmenu_renderer() item~
            Returns an item which indicates whether the current pipeline
            is still running.

            {options} is a dictionary with keys:
            `frames`
            Optional~
            The frames to use for the spinner. Can be either a string or a
            list of items. If it is a string, the string is split into
            characters and each character is a frame.

            Default: ['-', '\', '|', '/'']

            `done`
            Optional~
            The item to display when the pipeline is done, or when there is no
            pipeline running, or when the `delay` timeout has not been
            reached.

            Default: '·'

            `delay`
            Optional~
            The time in milliseconds before the spinner should show.

            Default: 100

            `interval`
            Optional~
            The time in milliseconds for each frame.

            Default: 100

                                    *wilder#wildmenu_powerline_separator()*
wilder#wildmenu_powerline_separator({str}, {fg}, {bg}, [{key}])
                                    wilder#wildmenu_renderer() item~
            Helper function to draw an powerline-like separator.
            {str} should be the separator character
            {fg} is the highlight group from which the |highlight-ctermfg| and
            |highlight-guifg| should be from.
            {bg} is the highlight group from which the |highlight-ctermbg| and
            |highlight-guibg| should be from.
            {key} is an optional argument which will be used to name the new
            highlight group. Otherwise, a new name will be generated.

                                    *wilder#wildmenu_condition()*
wilder#wildmenu_condition({predicate}, {if_true}, [{if_false}])
                                    wilder#wildmenu_renderer() item~
            Returns a item which renders the given items based on the
            {predicate}.
            {predicate} is a function which takes a {ctx} and the pipeline
            result {result} and returns true or false.
            The keys of {ctx} are the same as the ones in the `render` key of
            |wilder-renderer|.
            If the result is true, {if_true} is used the item. Otherwise
            {if_false} is used. If {if_false} is not given, no item is drawn.


                                    *wilder#popupmenu_renderer()*
wilder#popupmenu_renderer([{options}])
                                    Renderer~
                                    Neovim only~
            Returns a renderer which draws the results as a popupmenu.

            {options} is a dictionary with keys:
            `highlights`
            Optional~
            A dictionary whose values are |highlight-groups|. See
            |wilder-pipeline-result-draw| on how this dictionary is used.

            The default keys of the dictionary are:
                `default`
                Optional~
                The default highlight group used.

                Default: 'Pmenu'

                `selected`
                Optional~
                The highlight group used for a selected line.

                Default: 'PmenuSel'

                `error`
                Optional~
                The highlight group used for the error message.

                Default: 'ErrorMsg'

                `accent`
                Optional~
                The highlight group used for accents. See the
                `apply_highlights` option.

                Default: The `default` highlight with |underline| and |bold|

                `selected_accent`
                Optional~
                The highlight group used for accents for a selected candidate.
                See the `apply_highlights` option.

                Default: The `selected` highlight with |underline| and |bold|

            `ellipsis`
            Optional~
            The string to appended to a candidate if it is too long. The
            candidate is first truncated.

            Default: '...'

            `left`
            Optional~
            A list of columns to show on the left side of the popupmenu.
            See |wilder#popupmenu_renderer()-column|s.

            Default: []

            `right`
            Optional~
            A list of columns to show on the right side of the popupmenu.
            See |wilder#popupmenu_renderer()-column|s.

            Default: [' ', wilder#popupmenu_scrollbar()]

            `apply_highlights`
            Optional~

            See the `apply_highlights` key of |wilder#wildmenu_renderer()|.

            Default: []

            `winblend`
            Optional~
            'winblend' to apply to the popupmenu.

            Default: 0

            `max_height`
            Optional~
            The maximum height of the popupmenu. Can be a number or a string.
            If it is a String, it should be in the form of '{percent}%', where
            the value used is the height of the editor * {percent} / 100.

            Setting to 0 indicates no maximum height.

            Default: '50%'

            `max_width`
            Optional~
            The maximum width of the popupmenu. Can be a number or a string.
            If it is a String, it should be in the form of '{percent}%', where
            the value used is the width of the editor * {percent} / 100.

            Setting to 0 indicates no maximum width.

            Default: '50%'

            `min_width`
            Optional~
            The minimum width of the popupmenu. Can be a number or a string.
            If it is a String, it should be in the form of '{percent}%', where
            the value used is the width of the editor * {percent} / 100.

            Setting to 0 indicates no minimum width.

            Default: 0


                                    *wilder#wildmenu_renderer()-column*
For |wilder#popupmenu_renderer()|, columns can be of the following types:

            String:
            The value of the string will be drawn. The `default` or `selected`
            highlight will be used.

            The empty string ' ' can be used to give padding to the left or
            right of the popupmenu.

            Function:
            A function which takes a {ctx}, the pipeline result {result} and
            the index of the current row {i} and returns a string or a list of
            highlight chunks [[{text}, {hl}], ...].

            The keys of {ctx} are the same as the ones in the `render`
            key of |wilder-renderer|, with an additional `page` key which is a
            2 element array [{start}, {end}] indicating the start and end of
            the candidates currently being drawn. If no candidates are drawn,
            the page is [-1, -1].

            Dictionary:
            A dictionary with the following keys:
                `value`
                Mandatory~
                A string or a function. See above String and Function types
                for more details.

                `pre_hook`
                Optional~
                A function which takes a {ctx}. This function is called when
                wilder starts, or when wilder becomes unhidden. See
                |wilder-hidden|.

                {ctx} contains no keys.

                Default: None

                `post_hook`
                Optional~
                A function which takes a {ctx}. This function is called when
                wilder stops, or when wilder becomes hidden. See
                |wilder-hidden|.

                {ctx} contains no keys.

                Default: None

                                    *wilder#popupmenu_scrollbar()*
wilder#popupmenu_scrollbar([{options}]
                                    wilder#popupmenu_renderer() column~
            Returns a column which adds a scrollbar to the popupmenu.

            {options} is a dictionary with keys:
            `thumb_char`
            Optional~
            The character to use for the scrollbar thumb.

            Default: '█'

            `scrollbar_char`
            Optional~
            The character to use for the scrollbar.

            Default: ' '

            `thumb_hl`
            Optional~
            The highlight to use for the scrollbar thumb.

            Default: 'PmenuThumb'

            `scrollbar_hl`
            Optional~
            The highlight to use for the scrollbar.

            Default: 'PmenuSbar'

                                    *wilder#popupmenu_spinner()*
wilder#popupmenu_spinner([{options}])
                                    wilder#popupmenu_renderer() column~
            Returns a column which indicates whether the current pipeline is
            still running.

            {options} is a dictionary with keys:
            `frames`
            Optional~
            The frames to use for the spinner. Can be either a string or a
            list of strings. If it is a string, the string is split into
            characters and each character is a frame.

            Default: ['-', '\', '|', '/'']

            `done`
            Optional~
            The string to display when the pipeline is done, or when there
            is no pipeline running, or when the `delay` timeout has not been
            reached.

            Default: '·'

            `delay`
            Optional~
            The time in milliseconds before the spinner should show.

            Default: 100

            `interval`
            Optional~
            The time in milliseconds for each frame.

            Default: 100


==============================================================================
6. API                              *wilder-API*

wilder#in_context()                 *wilder#in_context()*
            Returns true if wilder is enabled, is in one of the modes set in
            the |wilder-option-modes| and is not hidden (see |wilder-hidden|).

            Example usage:
>
            cmap <expr> <Tab> wilder#in_context() ? wilder#next() : "\<Tab>"
            cmap <expr> <S-Tab> wilder#in_context()
                \ ? wilder#previous()
                \ : "\<S-Tab>"
<

wilder#enable_cmdline_enter()       *wilder#enable_cmdline_enter()*
            Creates a new |CmdlineEnter| autocmd to which will start wilder
            when the cmdline is entered.

wilder#enable()                     *wilder#enable()*
            Enables wilder.

wilder#disable()                    *wilder#disable()*
            Disables wilder.

wilder#toggle()                     *wilder#toggle()*
            Enables wilder if it is disabled. Disables it otherwise.

wilder#next()                       *wilder#next()*
            Select the next completion candidate.

wilder#previous()                   *wilder#previous()*
            Select the previous completion candidate.

wilder#can_accept_completion()      *wilder#can_accept_completion()*
            Returns true if |wilder#in_context()| is true, and there is a
            completion which can be accepted.

wilder#can_reject_completion()      *wilder#can_reject_completion()*
            Returns true if |wilder#in_context()| is true, and there is a
            completion which can be rejected.

wilder#accept_completion()          *wilder#accept_completion()*
            Accepts the current completion. Mainly used when in |menus| in
            cmdline mode.

            Example:
>
            cmap <expr> <Down> wilder#can_accept_completion() ?
                \ wilder#accept_completion() :
                \ "\<Down>"
<

wilder#reject_completion()          *wilder#reject_completion()*
            Rejects the current completion. Mainly used when in |menus| in
            cmdline mode.

            Example:
>
            cmap <expr> <Up> wilder#can_reject_completion() ?
                \ wilder#reject_completion() :
                \ "\<Up>"
<

wilder#resolve({ctx}, {x})          *wilder#resolve()*
            Called to continue from an async pipe in the |wilder-pipeline|.
            See |wilder-pipeline-thunk|.

wilder#reject({ctx}, {err})         *wilder#reject()*
            Called to throw an error from an async pipe in the
            |wilder-pipeline|.
            See |wilder-pipeline-thunk|.

wilder#wait({f}, [{on_finish}, [{on_error}]])
                                    *wilder#wait()*
                                    Experimental~
            If {f} is not a function, calls {on_finish} with it if provided,
            otherwise calls |wilder#resolve()|.

            If {f} is a function, calls it as a |wilder-pipeline-thunk|. When
            the thunk resolves, it will call {on_finish} if provided,
            otherwise it calls |wilder#resolve()|. If there is an error, calls
            {on_error} if provided, otherwise it calls |wilder#reject()|.

            This can be used to wait for thunks within another thunk.
            Example:
>
            function! Foo(ctx, x) abort
              return wilder#wait(Bar, {ctx, result_of_bar ->
                    \  wilder#resolve(Baz(result_of_bar))})
            endfunction
<


wilder#start_from_normal_mode()     *wilder#start_from_normal_mode()*
            Used to start wilder from normal mode. To be used when the current
            Vim or Neovim version does not support the |CmdlineEnter| autocmd.

            Example:
>
            nnoremap <expr> / wilder#start_from_normal_mode() . '/'
            nnoremap <expr> : wilder#start_from_normal_mode() . ':'
<

wilder#make_hl({name}, {args}, [, {args1}, ..., {argsN}])
                                    *wilder#make_hl()*
            Helper function to create a highlight group. Creates a highlight
            group with the given {name} based on {args}.

            These highlight groups will be recreated each time wilder is
            started, or is unhidden (see |wilder-hidden|).

            Returns {name}.

            {args} can be of the types:

            String:
            A |:hi-link| is made to the given highlight group.

            List:
            The list should be of the form:
            [{term_hl}, {cterm_hl}, {guiterm_hl}]

            Each entry can be of the types:
                List:
                [{fg}, {bg}] or [{fg}, {bg}, {attr-list}]
                where {fg} and {bg} are numbers or strings, and {attr-list} is
                a list of strings.
                Attributes in {attr-list} can be prefixed with 'no' to turn
                off the attribute.
                For {term_hl}, the first 2 elements are ignored.

                Example:
>
                call wilder#make_hl('MyHighlight', [
                    \ [0, 0, 'bold'],
                    \ [1, 2],
                    \ ['#000', '#fff', 'bold'],
                    \ ])
<

                Dictionary:
                The dictionary is similar to the one returned from
                |nvim_get_hl_by_name|. Setting the value to 0 turns off the
                attribute is present.
                The dictionary has the following keys:

                `foreground`
                Optional~
                The foreground highlight.

                Default: 'NONE'

                `background`
                Optional~
                The background highlight.

                Default: 'NONE'

                `bold`
                Optional~
                Whether the highlight group has the bold attribute.

                Default: Empty

                `italic`
                Optional~
                Whether the highlight group has the italic attribute.

                Default: Empty

                `reverse`
                Optional~
                Whether the highlight group has the reverse attribute.

                Default: Empty

                `standout`
                Optional~
                Whether the highlight group has the standout attribute.

                Default: Empty

                `underline`
                Optional~
                Whether the highlight group has the underline attribute.

                Default: Empty

                `undercurl`
                Optional~
                Whether the highlight group has the undercurl attribute.

                Default: Empty

            Any number of additional {args<n>} can be provided. The original
            {args} will be modified in order.

            For both {cterm_hl} and {gui_hl}, the `foreground` and
            `background` color is overridden if the respective color of
            {args<n>} is not 'NONE' or -1.

            For all three of {term_hl}, {cterm_hl} and {gui_hl}, attributes
            will be added or removed accordingly.

                Example:
>
                call wilder#make_hl('MyHighlight', [
                    \ {},
                    \ {'foreground': 1, 'background': 2},
                    \ {'foreground': '#000', 'background': '#fff', 'bold': 1},
                    \ ])

                call wilder#make_hl('MyHighlight2',
                    \ 'MyHighlight',
                    \ [{}, {}, {'underline': 1, 'reverse': 0}])
<

wilder#hl_with_attr({name}, {hl_group}, {attr} [, ..., {attrN}])
                                    *wilder#hl_with_attr()*
            Helper function to create a new |highlight-group| named {name} by
            applying attributes to {hl_group}. Attributes can be turned off by
            prefixing it with 'no'.

            Returns the name of the new highlight group.

                                    *wilder#uniq_filt()*
wilder#uniq_filt({ctx}, {opts}, {candidates}[, {query}])
            Takes a list and returns a copy of the list with duplicates
            removed. {opts} and {query} are ignored.

wilder#uniq_filter()                *wilder#uniq_filter()*
                                    Pipe~
            Returns a filter that filters and sorts the candidates using
            |wilder#uniq_filt()|.  Can be used as a |wilder-pipeline-pipe|.

                                    *wilder#python_uniq_filt()*
wilder#python_uniq_filt({ctx}, {opts}, {candidates}[, {query}])
                                    Neovim only~
                                    Async~
            Takes a list and returns a copy of the list with duplicates
            removed. {opts} and {query} are ignored.

wilder#python_uniq_filter()         *wilder#python_uniq_filter()*
                                    Pipe~
                                    Neovim only~
            Returns a filter that filters and sorts the candidates using
            |wilder#python_uniq_filt()|.  Can be used as a
            |wilder-pipeline-pipe|.

                                    *wilder#fuzzy_filt()*
wilder#fuzzy_filt({ctx}, {opts}, {candidates}, {query})
            Takes a list of candidates and fuzzily filters and sorts the
            candidates.

            A {candidate} is matched if it contains all the characters in
            {query} and in the same order.

            e.g. `foobar` will match `fbr`
                 `foobar` will not match `frb`

            Options contains no keys.

wilder#fuzzy_filter()               *wilder#fuzzy_filter()*
            Returns a fuzzy filter that filters and sorts the candidates using
            |wilder#fuzzy_filt()|. Can be used as the `fuzzy_filter` option in
            |wilder#cmdline_pipeline()|.

                                    *wilder#python_fuzzy_filt()*
wilder#python_fuzzy_filt({ctx}, {opts}, {candidates}, {query})
                                    Neovim only~
                                    Async~
            Takes a list of candidates and fuzzily filters and sorts the
            candidates using Python.

            A {candidate} is matched if it contains all the characters in
            {query} and in the same order.

            e.g. `foobar` will match `fbr`
                 `foobar` will not match `frb`

            Options contains no keys.

wilder#python_fuzzy_filter()        *wilder#python_fuzzy_filter()*
                                    Neovim only~
                                    Async~
            Returns a fuzzy filter that filters and sorts the candidates using
            |wilder#python_fuzzy_filt()|. Can be used as the `fuzzy_filter`
            option in |wilder#cmdline_pipeline()|.

                                    *wilder#python_fruzzy_filt()*
wilder#python_fruzzy_filt({ctx}, {opts}, {candidates}, {query})
                                    Neovim only~
                                    Async~
                                    fruzzy plugin required~
            Takes a list of candidates and fuzzily filters and sorts the
            candidates using `fruzzy`.

            The `fruzzy` plugin can be found at
            https://github.com/raghur/fruzzy.

            Note that the native module is not supported due to the use of
            multiple threads.

            {opts} can contain the following keys:
            `limmit`
            Optional~
            The maximum number of candidates to return.

            Default: 1000

            `fruzzy_path`
            Optional~
            The path to `fruzzy.py`. If left empty, Python will not attempt
            to add the path.

            Default: None

                                    *wilder#python_fruzzy_filter()*
wilder#python_fruzzy_filter([{limit}, [{fruzzy_path}]])
                                    Neovim only~
                                    fruzzy plugin required~
            Returns a fuzzy filter that filters and sorts the candidates using
            |wilder#python_fruzzy_filt()|. Can be used as the `fuzzy_filter`
            option in |wilder#cmdline_pipeline()|.

            The {limit} and {fruzzy_path} arguments are passed to
            |wilder#python_fruzzy_filt()| as options.

            {fruzzy_path} can be provided to set the path for `fruzzy.py`.
            It is inferred by Neovim otherwise.


                                    *wilder#python_cpsm_filt()*
wilder#python_cpsm_filt({ctx}, {opts}, {candidates}, {query})
                                    Neovim only~
                                    Async~
                                    cpsm plugin required~
            Takes a list of candidates and fuzzily filters and sorts the
            candidates using `cpsm`. The `cpsm` Vim plugin is required and can
            be found at https://github.com/nixprime/cpsm.

            {opts} can contain the following keys:
            `cpsm_path`
            Optional~
            The path to `cpsm_py.so`. If left empty, Python will not attempt
            to add the path.

            Default: None

                                    *wilder#python_cpsm_filter()*
wilder#python_cpsm_filter([{cpsm_path}])
                                    Neovim only~
                                    cpsm plugin required~
            Returns a fuzzy filter that filters and sorts the candidates using
            |wilder#python_cpsm_filt()|.

            The {cpsm_path} argument is passed to |wilder#python_cpsm_filt()|
            as an option.

            {cpsm_path} can be provided to set the path for `cpsm_py.so`. It
            is inferred by Neovim otherwise.

                                    *wilder#lexical_sort()*
wilder#lexical_sort({ctx}, {opts}, {candidates}[, {query}])
            Takes a list and returns a copy of the list sorted by lexical
            order. {opts} and {query} are ignored.

wilder#lexical_sorter()             *wilder#lexical_sorter()*
                                    Pipe~
            Returns a sorter which uses |wilder#lexical_sort()| to sort the
            candidates. Can be used as the `sorter` option in
            |wilder#cmdline_pipeline()|. Can also be used as a
            |wilder-pipeline-pipe|.

                                    *wilder#python_lexical_sort()*
wilder#python_lexical_sort({ctx}, {opts}, {candidates}[, {query}])
                                    Neovim only~
                                    Async~
            Takes a list and returns a copy of the list sorted by lexical
            order. {opts} and {query} are ignored.

wilder#python_lexical_sorter()      *wilder#python_lexical_sorter()*
                                    Pipe~
                                    Neovim only~
                                    Async~
            Returns a sorter which uses |wilder#python_lexical_sort()| to sort
            the candidates. Can be used as the `sorter` option in
            |wilder#cmdline_pipeline()|. Can also be used as a
            |wilder-pipeline-pipe|.

                                    *wilder#python_difflib_sort()*
wilder#python_difflib_sort({ctx}, {opts}, {candidates}, {query})
                                    Neovim only~
            Takes a list of candidates and a query and returns a
            |wilder-pipeline-thunk| which sorts the candidates using
            `difflib.SequenceMatcher`.

            {opts} can contain the following keys:
            `quick`
            Optional~
            Boolean indicating whether to use the `quick_ratio` scorer for the
            `SequenceMatcher`. Otherwise `ratio` is used.

            Default: 1

            `case_sensitive`
            Optional~
            Boolean indicating whether the sort should be case sensitive.

            Default: 1

            Example:
>
            wilder#result({'value': {ctx, xs ->
                  \ wilder#python_sort_difflib(ctx, {}, xs, ctx.input)}}})
<


                                    *wilder#python_difflib_sorter()*
wilder#python_difflib_sorter([{quick}, [{case_sensitive}]])
                                    Neovim only~
            Returns a sorter which uses |wilder#python_difflib_sort()| to sort
            the candidates. Can be used as the `sorter` option in
            |wilder#cmdline_pipeline()|.

            The {quick} and {case_sensitive} arguments are passed to
            |wilder#python_difflib_sort()| as options.

                                    *wilder#python_fuzzywuzzy_sort()*
wilder#python_fuzzywuzzy_sort({ctx}, {opts}, {candidates}, {query})
                                    Neovim only~
                                    Async~
                                    Python 3 fuzzywuzzy module required~
            Takes a list of candidates and a query and returns a
            |wilder-pipeline-thunk| which sorts the candidates using
            `fuzzywuzzy`.

            `fuzzywuzzy` can be installed using `pip install fuzzywuzzy`.

            {opts} can contain the following keys:
            `partial`
            Optional~
            Boolean indicating whether to use the `partial_ratio` scorer.
            Otherwise `ratio` is used.

            Default: 1

            Example:
>
            wilder#result({'value': {ctx, xs ->
                  \ wilder#python_sort_fuzzywuzzy(ctx, {}, xs, ctx.input)}}})
<

                                    *wilder#python_fuzzywuzzy_sorter()*
wilder#python_fuzzywuzzy_sorter([{partial}])
                                    Neovim only~
                                    Python 3 fuzzywuzzy module required~
            Returns a sorter which uses |wilder#python_fuzzywuzzy_sort()| to
            sort the candidates. Can be used as the `sorter` option in
            |wilder#cmdline_pipeline()|.

            The {partial} argument is passed to
            |wilder#python_fuzzywuzzy_sort()| as an option.

wilder#query_highlighter([{opts}])  *wilder#query_highlighter()*
                                    python option only for Neovim~
            Helper function which returns a function for the
            `highlighter` option for |wilder#wildmenu_renderer()| or
            |wilder#popupmenu_renderer()|.

            Returns a function which takes {ctx}, {candidate} and {data} as
            arguments.
            If {data} does not contain the key `query`, returns 0.  Otherwise,
            calculates the common subsequence between {candidate} and
            {data}['query'] and returns a list of [{start}, {len}] spans,
            where each span corresponds to the byte start and byte length of a
            subsequence block.

            {opts} is a dictionary with keys:
            `language`
            Optional~
            One of 'vim' or 'python'. If 'python', uses a Python
            |remote-plugin| function to retrieve the results.  Otherwise, uses
            a Vim function.

            Default: 'vim'

            `case_sensitive`
            Optional~
            If true, the matching is case insensitive, and case insensitive
            otherwise.

            Default: 0

wilder#pcre2_highlighter([{opts}])  *wilder#pcre2_highlighter()*
                                    Neovim only~
                                    pcre2 package required for lua option~
            Helper function which returns a function for the `highlighter`
            option for |wilder#wildmenu_renderer()| or
            |wilder#popupmenu_renderer()|.

            Returns a function which takes {ctx}, {candidate} and {data} as
            arguments.
            If {data} does not contain the key `pcre2.pattern`, returns 0.
            Otherwise, returns a list of [{start}, {len}] spans, where each
            span corresponds to the byte start and byte length of a capture
            group matched by {data}['pcre2.pattern'].

            {opts} is a dictionary with keys:
            `language`
            Optional~
            One of 'python' or 'lua'. If 'lua', uses a lua script to retrieve
            the results.
            Otherwise, uses a Python |remote-plugin| function to retrieve the
            results.

            The Lua pcre2 package is required this option is set to 'lua'.
            The pcre2 package source can be found at
            https://github.com/mah0x211/lua-pcre2 and can be installed with
            `luarocks install pcre2`.

            Default: 'python'

            `engine`
            Optional~
            The regex engine to use. Only used when `language` is 'python'.

            Default: 're'

            Note: This function is slow and should be avoided by users who are
            concerned about performance. Using 'lua' is slightly faster, but
            will still increase the rendering time.

wilder#cpsm_highlighter([{opts}])   *wilder#cpsm_highlighter()*
                                    Neovim only~
                                    Async~
                                    cpsm plugin required~
            Helper function which returns a function for the `highlighter`
            option for |wilder#wildmenu_renderer()| or
            |wilder#popupmenu_renderer()|.

            Returns a function which takes {ctx}, {candidate} and {data} as
            arguments.
            If {data} does not contain the key `query`, returns 0.
            Otherwise, returns a list of highlight spans as determined by
            `cpsm`.

            {opts} is a dictionary with keys:
            `cpsm_path`
            Optional~
            The parent directory of the `cpsm_py.so` file.

            Default: Inferred by Neovim.

            `highlight_mode`
            Optional~
            The highlight mode option passed to `cpsm`. Can be either 'basic'
            or 'detailed'.

            Default: 'basic'

            Note: This function is slow and should be avoided by users who are
            concerned about performance.

                                    *wilder#project_root()*
wilder#project_root([{root_markers}])
            Takes an optional list of paths and returns a function which tries
            to locate the root directory of the project from the current
            directory.

            {root_markers} is a list of file or directory names and defaults
            to ['.hg', '.git'].

wilder#renderer_mux({args})         *wilder#renderer_mux()*
            Creates a renderer multiplexer which chooses the renderer to use
            based on |getcmdchar()|.

            The keys of {args} should be a cmdtype e.g. '/', ':' or '?'.

            If the '?' key is omitted and the '/' key is present, '?' will use
            the renderer for '/'.

            The special key 'substitute' sets the renderer when the cmdline is
            in a |:substitute| command. If omitted, the '/' renderer is used.

            Example:
>
            wilder#set_option('renderer, wilder#renderer_mux({
                  \ ':': wilder#popupmenu_renderer(),
                  \ '/': wilder#wildmenu_renderer(),
                  \ })
<


==============================================================================
7. Depcrecated                      *wilder-deprecated*

wilder#vim_substring()              *wilder#vim_substring()*
                                    Deprecated~
            Deprecated: Use |wilder#vim_substring_pattern()|.

wilder#python_substring()           *wilder#python_substring()*
                                    Deprecated~
            Deprecated: Use |wilder#python_substring_pattern()|.

                                    *wilder#python_fuzzy_match()*
wilder#python_fuzzy_match([{options}])
                                    Deprecated~
            Deprecated: Use |wilder#python_fuzzy_pattern()|.

                                    *wilder#python_fuzzy_delimiter()*
wilder#python_fuzzy_delimiter([{options}])
                                    Deprecated~
            Deprecated: Use |wilder#python_fuzzy_delimiter_pattern()|.

wilder#vim_sort()                   *wilder#vim_sort()*
                                    Deprecated~
            Deprecated: Use |wilder#lexical_sorter()|.

wilder#python_sort()                *wilder#python_sort()*
                                    Deprecated~
            Deprecated: Use |wilder#python_lexical_sorter()|.

wilder#vim_uniq()                   *wilder#vim_uniq()*
                                    Deprecated~
            Deprecated: Use |wilder#filter_uniq()|.

wilder#python_uniq()                *wilder#python_uniq()*
                                    Deprecated~
            Deprecated: Use |wilder#python_filter_uniq()|.

wilder#filter_fuzzy()               *wilder#filter_fuzzy()*
                                    Deprecated~
            Deprecated: Use |wilder#fuzzy_filter()|.

wilder#python_filter_fuzzy()        *wilder#python_filter_fuzzy()*
                                    Deprecated~
            Deprecated: Use |wilder#python_fuzzy_filter()|.

                                    *wilder#python_filter_fruzzy()*
wilder#python_filter_fruzzy([{limit}, [{fruzzy_path}]])
            Deprecated: Use |wilder#python_fruzzy_filter()|.

                                    *wilder#python_filter_cpsm()*
wilder#python_filter_cpsm([{cpsm_path}])
            Deprecated: Use |wilder#python_cpsm_filter()|.

                                    *wilder#python_fuzzywuzzy()*
wilder#python_fuzzywuzzy({ctx}, {candidates}, {query})
                                    Deprecated~
            Deprecated: Use |wilder#python_fuzzywuzzy_sort()|.

                                    *wilder#python_sort_fuzzywuzzy()*
wilder#python_sort_fuzzywuzzy({ctx}, {opts}, {candidates}, {query})
                                    Deprecated~
            Deprecated: Use |wilder#python_fuzzywuzzy_sort()|.

                                    *wilder#query_common_subsequence_spans()*
wilder#query_common_subsequence_spans([{opts}])
                                    Deprecated~
            Deprecated: Use |wilder#query_highlighter()|.

                                    *wilder#pcre2_capture_spans()*
wilder#pcre2_capture_spans([{opts}])
                                    Deprecated~
            Deprecated: Use |wilder#pcre2_highlighter()|.

wilder#previous_arrow([{options}])  *wilder#previous_arrow()*
                                    Deprecated~
            Deprecated: Use |wilder#wildmenu_previous_arrow()|.

wilder#next_arrow([{options}])      *wilder#next_arrow()*
                                    Deprecated~
            Deprecated: Use |wilder#wildmenu_next_arrow()|.

wilder#index([{options}])           *wilder#index()*
                                    Deprecated~
            Deprecated: Use |wilder#wildmenu_index()|.

wilder#spinner([{options}])         *wilder#spinner()*
                                    Deprecated~
            Deprecated: Use |wilder#wildmenu_spinner()|.

                                    *wilder#separator()*
wilder#separator({str}, {fg}, {bg}, [{key}])
                                    Deprecated~
            Deprecated: Use |wilder#wildmenu_powerline_separator()|.

                                    *wilder#powerline_separator()*
wilder#powerline_separator({str}, {fg}, {bg}, [{key}])
                                    Deprecated~
            Deprecated: Use |wilder#wildmenu_powerline_separator()|.

                                    *wilder#condition()*
wilder#condition({predicate}, {if_true}, [{if_false}])
                                    Deprecated~
            Deprecated: Use |wilder#wildmenu_condition()|.


==============================================================================
8. Configurations                   *wilder-configurations*

Here are some example configurations:

Minimal Configuration~
>
    call wilder#enable_cmdline_enter()

    set wildcharm=<Tab>
    cmap <expr> <Tab> wilder#in_context() ? wilder#next() : "\<Tab>"
    cmap <expr> <S-Tab> wilder#in_context() ? wilder#previous() : "\<S-Tab>"

    " only / and ? is enabled by default
    call wilder#set_option('modes', ['/', '?', ':'])
<

Pipelines (Neovim only)~
>
    " add minimal configuration
    call wilder#set_option('pipeline', [
          \   wilder#branch(
          \     [
          \       wilder#check({_, x -> empty(x)}),
          \       wilder#history(100),
          \     ],
          \     wilder#cmdline_pipeline(),
          \     wilder#python_search_pipeline({
          \       'fuzzy': 1,
          \     }),
          \   ),
          \ ])
<

Airline/Lightline Theme Renderer~
>
    " use wilder#lightline_theme() for Lightline
    call wilder#set_option('renderer', wilder#wildmenu_renderer(
          \ wilder#airline_theme({
          \   'apply_highlights': wilder#query_common_subsequence_spans(),
          \   'separator': ' · ',
          \ })))
<

==============================================================================
 vim:tw=78:ts=4:ft=help:norl:expandtab:
